import{_ as a,c as l,o as t,ag as s}from"./chunks/framework.Dpoz9nJ7.js";const k=JSON.parse('{"title":"html-06定位 BFC","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端/html5/html-06 定位 BFC.md","filePath":"src/前端/html5/html-06 定位 BFC.md","lastUpdated":1710326451000}'),e={name:"src/前端/html5/html-06 定位 BFC.md"};function o(n,i,p,h,r,d){return t(),l("div",null,[...i[0]||(i[0]=[s(`<h1 id="html-06定位-bfc" tabindex="-1">html-06定位 BFC <a class="header-anchor" href="#html-06定位-bfc" aria-label="Permalink to &quot;html-06定位 BFC&quot;">​</a></h1><h2 id="一、-相对定位position-relative" tabindex="-1">一、 相对定位position：relative <a class="header-anchor" href="#一、-相对定位position-relative" aria-label="Permalink to &quot;一、 相对定位position：relative&quot;">​</a></h2><ol><li><p>只给一个元素加相对定位，不加具体的位置，对这个元素本身没有任何影响。</p></li><li><p>相对于原来的位置进行定位的，原来的位置还占位。</p></li><li><p>配合top,left,right,bottom使用</p></li><li><p>提升层级</p></li></ol><h2 id="二、提升层级" tabindex="-1">二、提升层级 <a class="header-anchor" href="#二、提升层级" aria-label="Permalink to &quot;二、提升层级&quot;">​</a></h2><p>z-index:改变元素层级，只用在加了定位的元素上，</p><p>数值越高层级越大，正常文档流层级是0。</p><p><strong>不生效的原因</strong></p><ul><li>没有设置定位</li><li>子级的层级永远不可能高于父级；</li></ul><h2 id="三、绝对定位-position-absolute" tabindex="-1">三、绝对定位：position: absolute; <a class="header-anchor" href="#三、绝对定位-position-absolute" aria-label="Permalink to &quot;三、绝对定位：position: absolute;&quot;">​</a></h2><ol><li><p>相对于初始包含块定位，根据用户代理的不同，初始包含块可能是html，也可能是画布，脱离文档流不占位。</p></li><li><p>配合top,left,right,bottom使用</p></li><li><p>通常情况下绝对定位和相对定位配合使用，子元素用绝对定位，父元素用相对定位（子绝父相）。</p></li><li><p>加了绝对定位的元素，先看父元素有没有定位（绝对定位，相对定位，固定定位），如果父元素有定位，就相对于父元素定位，父元素没有定位，就看爷爷，爷爷有定位就相对于爷爷定位</p></li><li><p>提升层级</p></li></ol><h2 id="四、-固定定位-position-fixed。" tabindex="-1">四、 固定定位：position：fixed。 <a class="header-anchor" href="#四、-固定定位-position-fixed。" aria-label="Permalink to &quot;四、 固定定位：position：fixed。&quot;">​</a></h2><ol><li>相对于浏览器进行定位，定位之后脱离文档流不占位。</li><li>提升层级</li><li>配合top,left,right,bottom使用</li></ol><p>添加fixed需要添加-webkit-transform: translateZ(0) 防止webkit抖动；</p><h2 id="五、粘合定位" tabindex="-1">五、粘合定位 <a class="header-anchor" href="#五、粘合定位" aria-label="Permalink to &quot;五、粘合定位&quot;">​</a></h2><p>position: sticky；</p><p>是relative和fixed的结合体；</p><p>当元素在屏幕内，表现为relative，当溢出屏幕，表现为fixed；</p><p>作用：特别适合导航的跟随定位效果；</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">nav</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-webkit-sticky</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sticky</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 必须加 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="六、-脱离文档流的属性" tabindex="-1">六、 脱离文档流的属性 <a class="header-anchor" href="#六、-脱离文档流的属性" aria-label="Permalink to &quot;六、 脱离文档流的属性&quot;">​</a></h2><ol><li>float:left;</li><li>float:right;</li><li>position:absolute;</li><li>position:fixed;</li></ol><p>浮动，脱离文档流但是不脱离文本流。</p><p>定位：既脱离文档流，也脱离文本流。</p><p>脱离文档流的元素就不区分块还是内联，都可以设置宽高等盒模型的样式。</p><h2 id="七、-bfc-块级格式化上下文" tabindex="-1">七、 BFC(块级格式化上下文) <a class="header-anchor" href="#七、-bfc-块级格式化上下文" aria-label="Permalink to &quot;七、 BFC(块级格式化上下文)&quot;">​</a></h2><h3 id="什么是bfc" tabindex="-1">什么是BFC <a class="header-anchor" href="#什么是bfc" aria-label="Permalink to &quot;什么是BFC&quot;">​</a></h3><p>Block Formatting Context：指页面中的一个渲染区域，并且拥有一套渲染规则，他决定了其子标签如何定位，以及与其他标签的相互关系和作用。</p><h3 id="如何生成bfc" tabindex="-1">如何生成BFC <a class="header-anchor" href="#如何生成bfc" aria-label="Permalink to &quot;如何生成BFC&quot;">​</a></h3><p>既然BFC是一块渲染区域，那这块渲染区域到底在哪，它又是有多大，这些由生成BFC的标签决定，CSS2.1中规定满足下列CSS声明之一的标签便会生成BFC。</p><ol><li>根标签 html</li><li>float的值不为none(为left/right)。</li><li>overflow的值不为visible（为hidden/scroll/auto都行）</li><li>display的值为inline-block</li><li>position的值为absolute或fixed</li></ol><h3 id="bfc的特性" tabindex="-1">BFC的特性 <a class="header-anchor" href="#bfc的特性" aria-label="Permalink to &quot;BFC的特性&quot;">​</a></h3><ol><li>内部的标签会在垂直方向上一个接一个的放置</li><li>垂直方向上的距离由margin决定，属于同一个BFC的两个相邻标签的margin会发生重叠</li><li>每个标签的左外边距与包含块的左边界相接触（从左向右），即使浮动标签也是如此。</li><li>BFC的区域不会与float的标签区域重叠</li><li>计算BFC的高度时，浮动子标签也参与计算</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子标签不会影响到外面标签，反之亦然</li></ol><h3 id="bfc解决的问题" tabindex="-1">BFC解决的问题 <a class="header-anchor" href="#bfc解决的问题" aria-label="Permalink to &quot;BFC解决的问题&quot;">​</a></h3><p>1）外边距折叠 (margin重叠的问题)</p><p>2）自适应两栏或三栏布局。</p><p>3）防止字体环绕</p><p>4）清除浮动</p><p>5）margin塌陷问题</p><h2 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-label="Permalink to &quot;面试题&quot;">​</a></h2><p>● 如何让盒子水平垂直居中？</p><p>● 简述BFC规则，及解决的问题？</p>`,41)])])}const b=a(e,[["render",o]]);export{k as __pageData,b as default};
