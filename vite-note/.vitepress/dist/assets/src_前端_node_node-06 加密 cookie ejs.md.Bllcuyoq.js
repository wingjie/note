import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.C8gWICj3.js";const g=JSON.parse('{"title":"node-06 加密 cookie ejs","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端/node/node-06 加密 cookie ejs.md","filePath":"src/前端/node/node-06 加密 cookie ejs.md","lastUpdated":1710326451000}'),n={name:"src/前端/node/node-06 加密 cookie ejs.md"},l=e(`<h1 id="node-06-加密-cookie-ejs" tabindex="-1">node-06 加密 cookie ejs <a class="header-anchor" href="#node-06-加密-cookie-ejs" aria-label="Permalink to &quot;node-06 加密 cookie ejs&quot;">​</a></h1><h2 id="一、加密" tabindex="-1">一、加密 <a class="header-anchor" href="#一、加密" aria-label="Permalink to &quot;一、加密&quot;">​</a></h2><ol><li>引入模板：<code>require(&#39;crypto&#39;)</code>；</li><li>散列算法(哈希)加密：</li></ol><p>散列算法也叫哈希算法，把任意长度的输入变换成固定长度的输出，常见有md5,sha1,sha256等,需要跟一个密钥，密钥随便写；</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">crypto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createHmac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;md5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hny#@!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ol start="3"><li>哈希算法：</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">crypto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createHash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;md5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)；</span></span></code></pre></div><p>加密之后的判断，再用户输入完成之后再次加密，再进行对比；</p><h2 id="二、cookie" tabindex="-1">二、cookie <a class="header-anchor" href="#二、cookie" aria-label="Permalink to &quot;二、cookie&quot;">​</a></h2><p>主要解决http协议无状态问题（没有记忆）；</p><h3 id="在nodejs使用cookie" tabindex="-1">在nodejs使用cookie <a class="header-anchor" href="#在nodejs使用cookie" aria-label="Permalink to &quot;在nodejs使用cookie&quot;">​</a></h3><ul><li><p>设置：<code>res.setHeader(&#39;Set-Cookie&#39;,[&#39;name=hny&#39;,&#39;age=18&#39;])</code>;</p></li><li><p>获取：<code>req.headers</code>；（也可以使用中间件来获取req.cookie）</p></li></ul><h3 id="在express中使用cookie" tabindex="-1">在express中使用cookie <a class="header-anchor" href="#在express中使用cookie" aria-label="Permalink to &quot;在express中使用cookie&quot;">​</a></h3><p>安装中间件：<code>cookie-parser</code>；</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cookieParse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cookie-parser&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cookieParse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><ul><li><p>设置：<code>res.cookie(name,value[,option])</code>；</p><p>可选option：</p><ul><li><p><code>expires</code> : 时间对象 <code>new Date( Date.now() +1*24*60*60*1000 )</code></p></li><li><p><code>maxAge</code>：<code>1*24*60*60*1000</code>；以毫秒为单位；</p></li><li><p><code>httpOnly</code>：布尔值，客户端不能设置cookie；</p></li><li><p><code>path</code>：只允许指定的位置访问；</p></li><li><p><code>domain</code>：只允许指定的域名访问；</p></li></ul><p>修改host文件：C:\\Windows\\System32\\drivers\\etc；ip地址+域名；指定域名为本地域名；</p></li><li><p>获取：req.cookies；</p></li></ul><h2 id="三、cookie-session" tabindex="-1">三、cookie-session <a class="header-anchor" href="#三、cookie-session" aria-label="Permalink to &quot;三、cookie-session&quot;">​</a></h2><p>安装中间件：<code>cookie-session</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cookieSession</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cookie-session&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cookieSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}))</span></span></code></pre></div><p><strong>对象里面</strong></p><ul><li><p>name: cookie名字，默认为session,</p></li><li><p>keys:[]；密钥，随意多个； 必填；需要方括号;</p></li><li><p>maxAge；过期时间，以毫秒为单位；</p></li></ul><p><strong>操作方法</strong></p><ul><li><p>设置cookie：<code>req.session.username = &#39;hny&#39;</code>;</p></li><li><p>获取cookie：<code>req.session.username</code>；</p></li></ul><p>如果需要删除cookie，可以让值等于空；</p><p>当cookie里面存有session id时，需要获取到存的cookie，需要设置相同的name和keys，才能通过req.session拿值；</p><h3 id="cookie和session的区别" tabindex="-1">cookie和session的区别 <a class="header-anchor" href="#cookie和session的区别" aria-label="Permalink to &quot;cookie和session的区别&quot;">​</a></h3><ul><li>（1）(失效) Session 会在浏览器关闭之后失效，Cookie 则可以在理论上永久有效(设置过期时间)。</li><li>（2）(存放) Cookie 数据存放在客户的浏览器上， Session 数据存放在服务器上。</li><li>（3）(黑客) Cookie 不安全，黑客可以分析本地的 Cookie, 并进行 Cookie 欺骗。 而 Session 保存在远程服务器上，相对安全（重要的信息应该存在session）;</li><li>（4）(限制) Cookie有大小限制，一般是4KB。 域名20-50个以内，Session 则没有这方面的限制。</li><li>（5）(禁用) 浏览器的设置可能禁用 Cookie，这时所有关于 Cookie 的应用都将失败，但是 Session 却永远不会有这个问题；</li></ul><h3 id="session与cookie的联系" tabindex="-1">session与cookie的联系 <a class="header-anchor" href="#session与cookie的联系" aria-label="Permalink to &quot;session与cookie的联系&quot;">​</a></h3><p>​ Session 依赖 cookie，因为 session id 存在客户端。</p><h2 id="四、模板引擎ejs" tabindex="-1">四、模板引擎ejs <a class="header-anchor" href="#四、模板引擎ejs" aria-label="Permalink to &quot;四、模板引擎ejs&quot;">​</a></h2><p>渲染页面：新闻列表页中的显示的内容不同，但显示的风格都一样，就可以作为一个模板，实际上就是渲染页面；</p><p>前端渲染：前端渲染都使用的ajax的技术，但不利于seo优化；</p><p>后端渲染：使用模板引擎，有利于seo优化；</p><ol><li>下载ejs包，之后不需要手动引入</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;view engine&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ejs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置引擎；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;views&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[__dirname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/views&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;template&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//按照顺序指定模板目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ejs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).__express)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//告诉express html以ejs模板引擎去渲染</span></span></code></pre></div><ol start="3"><li><code>res.render(&#39;index&#39;,[,data])</code>；使用ejs引擎；</li></ol><p>注意：传入的index文件不需要后缀，会自动去views文件夹中找模板文件，后面传入数据，多个可使用对象，在ejs模板中使用：</p><h3 id="标签含义" tabindex="-1">标签含义 <a class="header-anchor" href="#标签含义" aria-label="Permalink to &quot;标签含义&quot;">​</a></h3><ul><li><code>&lt;%</code> &#39;脚本&#39; 标签，用于流程控制，无输出。</li><li><code>&lt;%_</code> 删除其前面的空格符</li><li><code>&lt;%=</code> 输出数据到模板（输出是转义 HTML 标签）</li><li><code>&lt;%-</code> 输出非转义的数据到模板</li><li><code>&lt;%#</code> 注释标签，不执行、不输出内容</li><li><code>&lt;%%</code> 输出字符串 &#39;&lt;%&#39;</li><li><code>%&gt;</code> 一般结束标签</li><li><code>-%&gt;</code> 删除紧随其后的换行符</li><li><code>_%&gt;</code> 将结束标签后面的空格符删除</li></ul><h3 id="ejs常用语法" tabindex="-1">ejs常用语法 <a class="header-anchor" href="#ejs常用语法" aria-label="Permalink to &quot;ejs常用语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;%=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 变量</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用模板</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;%-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;header&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用循环或判断方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;%</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;%=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%&gt;</span></span></code></pre></div><h3 id="class使用变量" tabindex="-1">class使用变量 <a class="header-anchor" href="#class使用变量" aria-label="Permalink to &quot;class使用变量&quot;">​</a></h3><div class="language-ejs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ejs</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;div class=&quot;&lt;% if(!theme.music.fixed) { %&gt; music-player &lt;% } %&gt;&quot;&gt;&lt;/div&gt;</span></span></code></pre></div><h3 id="ejs声名变量" tabindex="-1">ejs声名变量 <a class="header-anchor" href="#ejs声名变量" aria-label="Permalink to &quot;ejs声名变量&quot;">​</a></h3><p>ejs还可以在外部声名变量，在内部直接使用，ejs也可以直接写js代码</p><div class="language-ejs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ejs</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;%</span></span>
<span class="line"><span>	var name = &#39;hny&#39;    </span></span>
<span class="line"><span>%&gt;</span></span>
<span class="line"><span>&lt;div class=&#39;&lt;%- theme.music.class %&gt;&#39;</span></span>
<span class="line"><span>    &lt;%= name %&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span></code></pre></div><h3 id="ejs作用域" tabindex="-1">ejs作用域 <a class="header-anchor" href="#ejs作用域" aria-label="Permalink to &quot;ejs作用域&quot;">​</a></h3><p>ejs是有作用域的，在ejs写的代码，必须使用ejs模板</p><div class="language-ejs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ejs</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;%</span></span>
<span class="line"><span>	var name = &#39;hny&#39;    </span></span>
<span class="line"><span>%&gt;</span></span>
<span class="line"><span>&lt;script&gt;</span></span>
<span class="line"><span>	var curName = &lt;%- name %&gt;</span></span>
<span class="line"><span>&lt;/script&gt;</span></span></code></pre></div>`,49),t=[l];function p(h,k,o,d,r,c){return a(),i("div",null,t)}const y=s(n,[["render",p]]);export{g as __pageData,y as default};
