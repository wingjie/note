import{_ as l,c as a,o as e,ag as s}from"./chunks/framework.Dpoz9nJ7.js";const u=JSON.parse('{"title":"小程序-03  媒体组件","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端/mini-programe/小程序-03  媒体组件.md","filePath":"src/前端/mini-programe/小程序-03  媒体组件.md","lastUpdated":1710326451000}'),t={name:"src/前端/mini-programe/小程序-03  媒体组件.md"};function o(r,i,n,p,d,h){return e(),a("div",null,[...i[0]||(i[0]=[s(`<h1 id="小程序-03-媒体组件" tabindex="-1">小程序-03 媒体组件 <a class="header-anchor" href="#小程序-03-媒体组件" aria-label="Permalink to &quot;小程序-03  媒体组件&quot;">​</a></h1><h2 id="一、camera-相机组件" tabindex="-1">一、camera 相机组件 <a class="header-anchor" href="#一、camera-相机组件" aria-label="Permalink to &quot;一、camera 相机组件&quot;">​</a></h2><ol><li>使用camera作为标签名创建相机，需要给camera设置宽高属性；</li></ol><ul><li>mode： normal / scanCode 相机模式/扫码模式；</li><li>device-position： back / front 后置/前置；</li><li>flash： auto/on/off 自动/打开闪光灯/关闭闪光灯</li><li>binderror： 用户不允许使用摄像头时触发事件；</li></ul><ol start="2"><li>wx.createCameraContext()，创建camera实例，使用以下方法： （1）takePhoto()：拍摄照片，将以下作为key-value对填写小括号里；</li></ol><ul><li>quality：high/normal/low 高质量/普通/低 成像质量；</li><li>success：接口调用成功的回调；</li><li>fail： 调用失败的回调；</li></ul><p>（2）startRecord()：开始录像； （3）stopRecord()：结束录像；</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createCameraContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">takePhoto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    quality: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;high&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="二、audio-音频组件" tabindex="-1">二、audio 音频组件 <a class="header-anchor" href="#二、audio-音频组件" aria-label="Permalink to &quot;二、audio 音频组件&quot;">​</a></h2><ol><li>audio： 音频默认组件（不建议使用，建议直接创建）</li></ol><ul><li>id： audio组件的标识，用来创建wx.createAudioContext时绑定；</li><li>src： 音频资源地址；</li><li>loop：开启循环播放；</li><li>controls：显示默认控件，默认为false；</li><li>poster：音频封面地址；</li><li>name： 音频默认名字；</li><li>author： 音频作者；</li><li>binderror： 播放错误时触发；</li><li>bindplay： 开始播放时触发；</li><li>bindpause： 暂停时触发；</li><li>bindended： 播放到未尾时触发；</li></ul><p>（1）error的code码：1 获取资源被用户禁止，2 网络错误 3 解码错误 4 不合适资源</p><ol start="2"><li><p>wx.createInnerAudioContext 创建一个音频；创建之后可以使用音频的属性和方法，属性通过变量.src = &#39;&#39;，方法：变量.play()；</p></li><li><p>可用属性</p></li></ol><ul><li>src： 资源地址；</li><li>startTime： 开始播放位置，单位s；</li><li>autoplay： 是否自动播放；</li><li>loop： 是否循环；</li><li>duration：当前音频的长度，单位s；（只读）</li><li>currentTime： 当前音频的播放位置，有6位小数点；（只读）</li><li>paused： 当前是否是暂停或停止状态（只读）</li><li>buffered： 音频缓冲的时间点；</li></ul><ol start="4"><li>可用方法：</li></ol><ul><li>play()： 播放；</li><li>pause()： 暂停；</li><li>stop()： 停止，会从开头开始播放；</li><li>seek()：跳转到指定位置，单位数字；</li><li>onPlay()： 监听播放事件；</li><li>onError()： 监听播放错误事件；</li><li>onWaiting()：监听音频加载事件；</li><li>destory()：销毁当前实例，在页面卸载时，将歌曲关闭；</li></ul><ol start="5"><li>wx.playBackgroundAudio({})</li></ol><p>使用后台播放器播放音乐，后台播放只能有一个音乐在播放，当用户离开小程序之后暂停播放，当使用其他小程序占用了音乐播放则停止播放；</p><ul><li>dataUrl： 音乐链接</li><li>title： 音乐标题</li><li>coverImgUrl： 封面URL</li><li>success： 接口调用成功的回调函数</li></ul><h2 id="三、video-视频组件" tabindex="-1">三、video 视频组件 <a class="header-anchor" href="#三、video-视频组件" aria-label="Permalink to &quot;三、video 视频组件&quot;">​</a></h2><ol><li>可用属性：</li></ol><ul><li>src： 视频地址；</li><li>duration： 指定视频时长</li><li>controls： 显示默认控件，默认true；</li><li>autoplay： 是否自动播放；</li><li>loop： 是否循环播放；</li><li>enable-progress-gesture： 是否开启控制进度的手势；</li><li>enable-play-gesture： 开启双击切换播放/暂停；</li><li>poster： 视频封面的图片网络资源地址；</li></ul><ol start="2"><li>发弹幕，需要在video标签上，设置danmu-btn，显示弹幕按钮，danmu-list，赋值一个初始的数组，已有弹幕；</li><li>wx.createVideoContext，创建video实例，使用控制功能，需要给video标签绑定一个id，操作对应的video组件；</li></ol><ul><li>play()： 播放视频；</li><li>pause()： 暂停视频；</li><li>stop()： 停止视频；</li><li>seek()： 跳转到指定位置；</li><li>sendDanmu()：发送弹幕；对象两个属性，text/color，弹幕文字以及弹幕颜色；</li><li>playbackRate()： 设置倍速播放；</li><li>requestFullScreen()： 进入全屏；</li><li>exitFullScreen()： 退出全屏；</li></ul><h2 id="四、navigator-页面链接" tabindex="-1">四、navigator 页面链接 <a class="header-anchor" href="#四、navigator-页面链接" aria-label="Permalink to &quot;四、navigator 页面链接&quot;">​</a></h2><ol><li>相当于a标签，可以跳转页面，默认为块标签，使用url指定跳转地址；</li><li>open-type属性：</li></ol><ul><li>navigate： 对应wx.navigateTo；</li><li>redirect： 对应wx.redirectTo；</li><li>switchTab： 对应wx.switchTab；</li><li>reLaunch： 对应wx.reLaunch；</li><li>navigateBack： 对应wx.navigateBack；</li></ul><h2 id="五、map-地图组件" tabindex="-1">五、map 地图组件 <a class="header-anchor" href="#五、map-地图组件" aria-label="Permalink to &quot;五、map  地图组件&quot;">​</a></h2><ol><li>添加map标签，可用属性：</li></ol><ul><li>longitude/latitude： 经度/纬度，单位number；</li><li>scale： 缩放级别，取值3-20；</li><li>show-compass： 显示指南针</li><li>enable-overlooking： 开启俯视</li><li>enable-zoom： 开启缩放；</li><li>enable-scroll： 开启拖动；</li><li>enable-rotate： 开启旋转；</li><li>enable-satellite： 开启卫星图；</li><li>enable-traffic： 开启实时路况；</li></ul>`,30)])])}const k=l(t,[["render",o]]);export{u as __pageData,k as default};
