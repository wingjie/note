import{_ as p,C as h,c as e,o as E,j as a,ag as k,a as i,G as l,w as t}from"./chunks/framework.Dpoz9nJ7.js";const m=JSON.parse('{"title":"Electron-02  进程通讯","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端/Electron/Electron-02 进程通讯.md","filePath":"src/前端/Electron/Electron-02 进程通讯.md","lastUpdated":1737701917000}'),d={name:"src/前端/Electron/Electron-02 进程通讯.md"},r={start:"2"},g={start:"3"},y={start:"2"},o={start:"3"},F={start:"2"},C={start:"3"};function u(A,s,B,D,b,c){const n=h("font");return E(),e("div",null,[s[60]||(s[60]=a("h1",{id:"electron-02-进程通讯",tabindex:"-1"},[i("Electron-02 进程通讯 "),a("a",{class:"header-anchor",href:"#electron-02-进程通讯","aria-label":'Permalink to "Electron-02  进程通讯"'},"​")],-1)),s[61]||(s[61]=a("h2",{id:"进程通讯意义",tabindex:"-1"},[i("进程通讯意义 "),a("a",{class:"header-anchor",href:"#进程通讯意义","aria-label":'Permalink to "进程通讯意义"'},"​")],-1)),a("blockquote",null,[a("p",null,[s[1]||(s[1]=i("值的注意的是： 上⽂中的 preload.js ，⽆法使⽤全部 Node 的 API，⽐如：不能使⽤ Node 中的 fs 模块，但主进程（main.js ）是可以的，这时就需要",-1)),l(n,{color:"orange"},{default:t(()=>[...s[0]||(s[0]=[i("进程通讯",-1)])]),_:1}),s[2]||(s[2]=i(" 了。简单说：要让preload.js 通知 main.js 去调⽤ fs 模块去⼲活。",-1))])]),s[62]||(s[62]=a("p",null,"关于 Electron 进程通信，我们要知道：",-1)),s[63]||(s[63]=a("ul",null,[a("li",null,"IPC 全称为： InterProcess Communication ，即：进程通信。"),a("li",null,"IPC 是 Electron 中最为核⼼的内容，它是从 UI 调⽤原⽣ API 的唯⼀⽅法！"),a("li",null,"Electron 中，主要使⽤ ipcMain 和 ipcRenderer 来定义“通道”，进⾏进程通信。")],-1)),s[64]||(s[64]=a("h2",{id:"渲染进程➡️主进程-单项",tabindex:"-1"},[i("渲染进程➡️主进程（单项） "),a("a",{class:"header-anchor",href:"#渲染进程➡️主进程-单项","aria-label":'Permalink to "渲染进程➡️主进程（单项）"'},"​")],-1)),a("p",null,[s[7]||(s[7]=i("概述：在",-1)),l(n,{color:"#2080f0"},{default:t(()=>[...s[3]||(s[3]=[i("渲染器进程",-1)])]),_:1}),s[8]||(s[8]=i("中",-1)),l(n,{color:"red"},{default:t(()=>[...s[4]||(s[4]=[i("在preload中 ipcRenderer.send('信道'('create-file'),参数)",-1)])]),_:1}),s[9]||(s[9]=i("发送消息; 在",-1)),l(n,{color:"#2080f0"},{default:t(()=>[...s[5]||(s[5]=[i("主进程",-1)])]),_:1}),s[10]||(s[10]=i("中使用",-1)),l(n,{color:"red"},{default:t(()=>[...s[6]||(s[6]=[i("ipcMain.on('信道'('create-file'),createFile)",-1)])]),_:1}),s[11]||(s[11]=i("接收消息。 信道是产生的关键key",-1))]),a("p",null,[s[13]||(s[13]=i("常⽤于： ",-1)),l(n,{color:"red"},{default:t(()=>[...s[12]||(s[12]=[i("在Web中调用主进程的API",-1)])]),_:1}),s[14]||(s[14]=i("，例如下⾯的这个需求：",-1))]),s[65]||(s[65]=k("",4)),a("ol",r,[a("li",null,[s[16]||(s[16]=a("code",null,"preload.js",-1)),s[17]||(s[17]=i(" 中使⽤ ",-1)),l(n,{color:"#2080f0"},{default:t(()=>[...s[15]||(s[15]=[i("ipcRenderer.send('信道',参数)",-1)])]),_:1}),s[18]||(s[18]=i("发送消息，与主进程通信。",-1))])]),a("blockquote",null,[l(n,{color:"red"},{default:t(()=>[...s[19]||(s[19]=[i("ipcRenderer是electron中的的方法 ",-1)])]),_:1})]),s[66]||(s[66]=k("",1)),a("ol",g,[a("li",null,[s[21]||(s[21]=i("主进程中，在加载⻚⾯之前，使⽤ ",-1)),a("strong",null,[l(n,{color:"red"},{default:t(()=>[...s[20]||(s[20]=[i("ipcMain.on('信道',回调)",-1)])]),_:1})]),s[22]||(s[22]=i(" 配置对应回调函数，接收消息。",-1))])]),s[67]||(s[67]=k("",2)),a("p",null,[s[28]||(s[28]=i("概述：",-1)),l(n,{color:"#2080f0"},{default:t(()=>[...s[23]||(s[23]=[i("主进程",-1)])]),_:1}),s[29]||(s[29]=i("使⽤",-1)),l(n,{color:"#2080f0"},{default:t(()=>[...s[24]||(s[24]=[i("win.webContents.send",-1)])]),_:1}),s[30]||(s[30]=i("发送消息, ",-1)),l(n,{color:"brown"},{default:t(()=>[...s[25]||(s[25]=[i("渲染进程",-1)])]),_:1}),s[31]||(s[31]=i("通过",-1)),l(n,{color:"brown"},{default:t(()=>[...s[26]||(s[26]=[i("ipcRenderer.on",-1)])]),_:1}),s[32]||(s[32]=i("处理消息，常⽤于：",-1)),l(n,{color:"red"},{default:t(()=>[...s[27]||(s[27]=[i("从主进程主动发送消息给渲染进程",-1)])]),_:1}),s[33]||(s[33]=i("，例如下⾯的这个需求：",-1))]),s[68]||(s[68]=k("",3)),a("ol",y,[a("li",null,[s[35]||(s[35]=a("code",null,"preload.js",-1)),s[36]||(s[36]=i("中使用",-1)),l(n,{color:"#2080f0"},{default:t(()=>[...s[34]||(s[34]=[i("ipcRenderer.on('信道',()=>{})",-1)])]),_:1}),s[37]||(s[37]=i("接收消息，并配置回调函数。",-1))])]),s[69]||(s[69]=k("",1)),a("ol",o,[a("li",null,[s[39]||(s[39]=i("主进程中，在合适的时候，使用",-1)),l(n,{color:"brown"},{default:t(()=>[...s[38]||(s[38]=[i("win.webContents.send('信道', 数据)",-1)])]),_:1}),s[40]||(s[40]=i("发送消息。",-1))])]),s[70]||(s[70]=k("",2)),a("p",null,[s[45]||(s[45]=i("概述：",-1)),l(n,{color:"#2080f0"},{default:t(()=>[...s[41]||(s[41]=[i("渲染进程",-1)])]),_:1}),s[46]||(s[46]=i("通过",-1)),l(n,{color:"#2080f0"},{default:t(()=>[...s[42]||(s[42]=[i("ipcRenderer.invoke",-1)])]),_:1}),s[47]||(s[47]=i(" 发送消息，",-1)),l(n,{color:"brown"},{default:t(()=>[...s[43]||(s[43]=[i("主进程",-1)])]),_:1}),s[48]||(s[48]=i("使⽤",-1)),l(n,{color:"brown"},{default:t(()=>[...s[44]||(s[44]=[i("ipcMain.handle",-1)])]),_:1}),s[49]||(s[49]=i(" 接收并处理消 息。",-1))]),s[71]||(s[71]=a("blockquote",null,[a("p",null,[i("备注："),a("code",null,"ipcRenderer.invoke()"),i("的返回值是"),a("code",null,"Promise"),i("实例。")])],-1)),a("p",null,[s[51]||(s[51]=i("常⽤于：",-1)),l(n,{color:"red"},{default:t(()=>[...s[50]||(s[50]=[i("从渲染器进程调用主进程方法并等带结果",-1)])]),_:1}),s[52]||(s[52]=i("，例如下⾯的这个需求：",-1))]),s[72]||(s[72]=k("",4)),a("ol",F,[a("li",null,[s[54]||(s[54]=a("code",null,"preload.js",-1)),s[55]||(s[55]=i(" 中使⽤ ",-1)),l(n,{color:"#2080f0"},{default:t(()=>[...s[53]||(s[53]=[i("ipcRenderer.invoke('信道',参数)",-1)])]),_:1}),s[56]||(s[56]=i(" 发送消息，与主进程通信。",-1))])]),s[73]||(s[73]=k("",1)),a("ol",C,[a("li",null,[s[58]||(s[58]=i("主进程中，在加载⻚⾯之前，使⽤ ",-1)),l(n,{color:"brown"},{default:t(()=>[...s[57]||(s[57]=[i(" ipcMain.handle('信道',回调)",-1)])]),_:1}),s[59]||(s[59]=i(" 接收消息，并配置回 调函数。",-1))])]),s[74]||(s[74]=k("",1))])}const f=p(d,[["render",u]]);export{m as __pageData,f as default};
