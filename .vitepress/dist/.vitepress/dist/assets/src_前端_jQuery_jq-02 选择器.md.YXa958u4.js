import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.C8gWICj3.js";const g=JSON.parse('{"title":"jq-02 选择器","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端/jQuery/jq-02 选择器.md","filePath":"src/前端/jQuery/jq-02 选择器.md","lastUpdated":1710314684000}'),h={name:"src/前端/jQuery/jq-02 选择器.md"},n=t(`<h1 id="jq-02-选择器" tabindex="-1">jq-02 选择器 <a class="header-anchor" href="#jq-02-选择器" aria-label="Permalink to &quot;jq-02 选择器&quot;">​</a></h1><h2 id="一、选择器" tabindex="-1">一、选择器 <a class="header-anchor" href="#一、选择器" aria-label="Permalink to &quot;一、选择器&quot;">​</a></h2><p>选择器的实现比较复杂，消耗性能比较大，建议相同的选择器进行变量保存操作，避免重复使用选择器；</p><h3 id="css选择器" tabindex="-1">css选择器 <a class="header-anchor" href="#css选择器" aria-label="Permalink to &quot;css选择器&quot;">​</a></h3><p>可以使用所有的样式选择器；</p><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>#id</code></td><td>获取id名</td></tr><tr><td><code>.class</code></td><td>获取class类名</td></tr><tr><td><code>div</code></td><td>获取标签名</td></tr><tr><td><code>div,p,li</code></td><td>群组选择器</td></tr><tr><td><code>div.red</code></td><td>获取class为red的div标签</td></tr><tr><td><code>div&gt;span</code></td><td>获取div下的直接子元素span；</td></tr><tr><td><code>div span</code></td><td>div下的所有子元素span标签；</td></tr><tr><td><code>div~span</code></td><td>选择下面所有的；</td></tr></tbody></table><h3 id="基本筛选选择器" tabindex="-1">基本筛选选择器 <a class="header-anchor" href="#基本筛选选择器" aria-label="Permalink to &quot;基本筛选选择器&quot;">​</a></h3><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>:first</code></td><td>第一个</td></tr><tr><td><code>:last</code></td><td>最后一个</td></tr><tr><td><code>:eq(index)</code></td><td>指定第一个，下标从0开始；</td></tr><tr><td><code>:not()</code></td><td>除了小括号的标签；</td></tr><tr><td><code>:odd</code></td><td>下标为奇数的标签，下标是从0开始的，所以选择的是偶数标签；</td></tr><tr><td><code>:even</code></td><td>下标为偶数的标签</td></tr><tr><td><code>:gt(1)</code></td><td>下标大于1的元素</td></tr><tr><td><code>:lt(1)</code></td><td>下标小于1的元素；</td></tr><tr><td><code>:header</code></td><td>所有h标签；</td></tr><tr><td><code>:root</code></td><td>选中html标签；</td></tr><tr><td><code>:animated</code></td><td>匹配所有正在执行动画效果的元素；</td></tr></tbody></table><p><code>$(&quot;div:not(:animated)&quot;).animate({&quot;width&quot;:&quot;+=200&quot;})</code> //给没有在动画的div，加长</p><h3 id="内容选择器" tabindex="-1">内容选择器 <a class="header-anchor" href="#内容选择器" aria-label="Permalink to &quot;内容选择器&quot;">​</a></h3><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>:contains(我)</code></td><td>选择内容有我的标签</td></tr><tr><td><code>:empty</code></td><td>选择内容为空的标签，有空格或标签都不为空；</td></tr><tr><td><code>:parent</code></td><td>选择有内容的标签；</td></tr><tr><td><code>:has(span)</code></td><td>选择有span标签的标签；</td></tr></tbody></table><h3 id="隐藏看见" tabindex="-1">隐藏看见 <a class="header-anchor" href="#隐藏看见" aria-label="Permalink to &quot;隐藏看见&quot;">​</a></h3><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>:hidden</code></td><td>获取看不见的标签(在页面中不显示的标签) type=&quot;hidden&quot; 和display:none；</td></tr><tr><td><code>:visible</code></td><td>获取可以看见的标签，页面中显示的</td></tr></tbody></table><h3 id="属性选择器" tabindex="-1">属性选择器 <a class="header-anchor" href="#属性选择器" aria-label="Permalink to &quot;属性选择器&quot;">​</a></h3><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>div[class]</code></td><td>有class属性的</td></tr><tr><td><code>div[class=box]</code></td><td>div的class属性值为box的；</td></tr><tr><td><code>div[class^=box]</code></td><td>以box开头的</td></tr><tr><td><code>div[class$=box]</code></td><td>以box结尾的</td></tr><tr><td><code>div[class*=box]</code></td><td>包含box的；</td></tr><tr><td><code>div[class][title]</code></td><td>有class属性并且有title属性的；</td></tr></tbody></table><h3 id="子元素选择器" tabindex="-1">子元素选择器 <a class="header-anchor" href="#子元素选择器" aria-label="Permalink to &quot;子元素选择器&quot;">​</a></h3><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>ul li:first-child</code></td><td>选择所有父元素中第一个li first的区别：第一个父元素下所有li中的第一个li</td></tr><tr><td><code>ul li:last-child</code></td><td>选择所有ul下的最后一个li；</td></tr><tr><td><code>:nth-child()</code></td><td>选择指定的第几个标签，从1开始</td></tr><tr><td><code>:first-of-type</code></td><td>选择第一次出现的；</td></tr><tr><td><code>:last-of-type</code></td><td>最后一次出现的；</td></tr><tr><td><code>:nth-of-type()</code></td><td>指定的第几个标签；</td></tr></tbody></table><p><code>child</code>：是从第一个孩子开始找；</p><p><code>of-type</code>：是从第一次出现的孩子找的；</p><h3 id="表单选择器" tabindex="-1">表单选择器 <a class="header-anchor" href="#表单选择器" aria-label="Permalink to &quot;表单选择器&quot;">​</a></h3><p><code>:input</code> 选中所有表单标签，包括select、textarea；</p><p>选中具体某个input标签可以冒号type类型，select直接使用标签选择器；</p><p>例：</p><p><code>:text</code> 选中单文本框；</p><p><code>.attr(&quot;checked&quot;,true)</code>；设置复选框被选中状态</p><h3 id="表单对象属性" tabindex="-1">表单对象属性 <a class="header-anchor" href="#表单对象属性" aria-label="Permalink to &quot;表单对象属性&quot;">​</a></h3><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>:enabled</code></td><td>选中所有可用的；</td></tr><tr><td><code>:disabled</code></td><td>选中所有禁用的；</td></tr><tr><td><code>:checked</code></td><td>选中的；</td></tr><tr><td><code>:selected</code></td><td>下拉框被选中的；</td></tr></tbody></table><h2 id="二、迭代" tabindex="-1">二、迭代 <a class="header-anchor" href="#二、迭代" aria-label="Permalink to &quot;二、迭代&quot;">​</a></h2><h3 id="each" tabindex="-1">$.each <a class="header-anchor" href="#each" aria-label="Permalink to &quot;$.each&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;li&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;li&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这里的item是每个元素, 使用jquery需要再次$(item)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 也可以$(this), this指向当前这个item</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="map" tabindex="-1">$.map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;$.map&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>当map操作数组返回null和undefined时，不会保存在新的数组中；</p><p>$.map不能直接<code>$(b).map(function(){})</code>;</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aa </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ary,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aa);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[1,2,3]，4满足条件，返回空；</span></span></code></pre></div><p>这里的aa是dom元素的，如果$(ary).map调用的话直接将类型转换jquery元素了；低版本浏览器会发生不兼容；标准调用方法是<code>$.map(ary,function(){})</code>;</p><h2 id="三、extend" tabindex="-1">三、extend <a class="header-anchor" href="#三、extend" aria-label="Permalink to &quot;三、extend&quot;">​</a></h2><h3 id="扩展" tabindex="-1">扩展 <a class="header-anchor" href="#扩展" aria-label="Permalink to &quot;扩展&quot;">​</a></h3><p><code>$.extend(obj,obj1,obj2)</code>；将obj1和obj2扩展到obj中，一般obj是一个空对象{}；</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({},obj1,obj2)</span></span></code></pre></div><h3 id="深拷贝" tabindex="-1">深拷贝 <a class="header-anchor" href="#深拷贝" aria-label="Permalink to &quot;深拷贝&quot;">​</a></h3><blockquote><p>复制地址和数据</p></blockquote><p>原理：根据地址找到内容，并复制内容在堆中重新存储，返回新的地址；新的值修改的地址不影响旧的值；</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{},obj3)</span></span></code></pre></div><p>默认是false(浅拷贝)；true深拷贝；如果不用true相当于声明了两个变量(加载慢)；如果用true就是拷贝；</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj6 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{},obj4);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj6.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ls&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj6);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//ls</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj4);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//zs</span></span></code></pre></div><h3 id="浅拷贝-原生方法" tabindex="-1">浅拷贝(原生方法) <a class="header-anchor" href="#浅拷贝-原生方法" aria-label="Permalink to &quot;浅拷贝(原生方法)&quot;">​</a></h3><blockquote><p>只复制地址，不复制数据；修改新变量的值，旧变量的值也一起修改了；</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj4;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj5.name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ls&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj5.name);        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//ls</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj4.name);        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//ls</span></span></code></pre></div><p>原理：复制了obj4的地址，数据没有复制，所以修改了内容，obj4的地址也是那个内容，所以obj4就是obj5的内容；</p><h2 id="四、方法" tabindex="-1">四、方法 <a class="header-anchor" href="#四、方法" aria-label="Permalink to &quot;四、方法&quot;">​</a></h2><p>所有事件的调用：<code>$(&quot;button&quot;).click(function(){})</code>;</p><p>直接去掉on；直接括号函数，</p><p>.index()；元素的下标；</p><p>jquery选项卡</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.box div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;active&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">siblings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;on&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">siblings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//链式调用，可以一直写点，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//隐式循环，不用循环，隐式调用循环；</span></span></code></pre></div><h2 id="高频面试题" tabindex="-1">高频面试题 <a class="header-anchor" href="#高频面试题" aria-label="Permalink to &quot;高频面试题&quot;">​</a></h2><p>● $(document).ready() 方法和 window.onload 有什么区别？</p><p>● jQuery 的属性拷贝 (extend) 的实现原理是什么，如何实现深拷贝？</p>`,59),e=[n];function l(d,k,p,r,E,o){return a(),i("div",null,e)}const y=s(h,[["render",l]]);export{g as __pageData,y as default};
